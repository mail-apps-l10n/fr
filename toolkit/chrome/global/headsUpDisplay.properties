typeError=Erreur : 
typeWarning=Avertissement : 
typeNetwork=Réseau : 
typeException=Exception :  
typeCssParser=Analyseur CSS : 
typeStrict=Avertissement strict : 
msgCategory=Catégorie : 
errFile=Fichier source : %S
errLine=Ligne : %S
errLineCol=Ligne : %S, Colonne: %S
errCode=Code source :
jsWorkspaceTitle=Espace de travail JavaScript
btnHide=Masquer
btnPrefs=Préférences
categoryPage=Page :
categoryConsole=Console :
btnMutation=Mutation DOM
tipMutation=Active ou désactive la journalisation des événements de mutation DOM
btnPageNet=Réseau
tipPageNet=Journaliser les accès réseau
btnPageCSS=CSS
tipPageCSS=Journaliser les erreurs d'analyse CSS
btnPageJS=JS
tipPageJS=Journaliser les exceptions JavaScript
btnConsoleErrors=Erreurs
tipConsoleErrors=Journaliser les appels à console.error()
btnConsoleInfo=Info
tipConsoleInfo=Journaliser les appels à console.info()
btnConsoleWarnings=Avertissements
tipConsoleWarnings=Journaliser les appels à console.warn()
btnConsoleLog=Log
tipConsoleLog=Journaliser les appels à console.log()
btnGlobal=Messages globaux
tipGlobal=Active ou désactive la journalisation des messages globaux
localConsole=Console locale
itemClear=Vider la console
stringFilter=Filtre
close.button=Fermer
close.accesskey=F
update.button=Mettre à jour
update.accesskey=M
# LOCALIZATION NOTE FOR `jsPropertyTitle` AND `jsPropertyInspectTitle`:
#
# The "PropertyPanel" is used to display a JS object to the user.
# If it is clear which object is being inspected (e.g., window, document object)
# the title of the panel is based on the `jsPropertyInspectTitle` string.
# If it isn't clear which object is being inspected, the `jsPropertyTitle` string
# gets used. This can be the case when the user logs an object to the WebConsole
# output using the console.log(aObjectToInspect) method.
#
# You can find a screenshot of the PropertyPanel here:
#   https://bug585030.bugzilla.mozilla.org/attachment.cgi?id=464034
jsPropertyTitle=Inspecteur d'objet
# LOCALIZATION NOTE (jsPropertyInspectTitle):
#
# The %S is replaced by the evaluated code the user clicked on in the console.
#
# Example: The user executed `window.document` in the WebConsole. The `document`
# object is written to the output. If the user clicks on the `document` output
# in the console, a PropertyPanel will show up. The title of the PropertyPanel
# is set to `Inspect: window.document` because the clicked `document` object was
# evaluated based on the `window.document` string.
jsPropertyInspectTitle=Examiner : %S
copyCmd.label=Copier
copyCmd.accesskey=C
